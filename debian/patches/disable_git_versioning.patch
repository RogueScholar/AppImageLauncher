Index: AppImageLauncher-1.0.0-beta-2/CMakeLists.txt
===================================================================
--- AppImageLauncher-1.0.0-beta-2.orig/CMakeLists.txt	2019-01-05 20:34:55.372505103 +0000
+++ AppImageLauncher-1.0.0-beta-2/CMakeLists.txt	2019-01-05 20:42:32.322205939 +0000
@@ -26,50 +26,50 @@
 endif()
 
 # check whether git is available
-find_program(GIT git)
-set(GIT_COMMIT_CACHE_FILE "${PROJECT_SOURCE_DIR}/cmake/GIT_COMMIT")
+#find_program(GIT git)
+#set(GIT_COMMIT_CACHE_FILE "${PROJECT_SOURCE_DIR}/cmake/GIT_COMMIT")
 
-if(NOT GIT STREQUAL "GIT-NOTFOUND")
+#if(NOT GIT STREQUAL "GIT-NOTFOUND")
     # read Git revision ID
     # WARNING: this value will be stored in the CMake cache
     # to update it, you will have to reset the CMake cache
     # (doesn't matter for CI builds like Travis for instance, where there's no permanent CMake cache)
-    execute_process(
-        COMMAND git rev-parse --short HEAD
-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-        OUTPUT_VARIABLE APPIMAGELAUNCHER_GIT_COMMIT
-        OUTPUT_STRIP_TRAILING_WHITESPACE
-        ERROR_QUIET
-        RESULT_VARIABLE GIT_RESULT
-    )
-
-    if(GIT_RESULT AND GIT_RESULT EQUAL 0)
-        message("Storing git commit ID in cache file")
-        file(WRITE "${GIT_COMMIT_CACHE_FILE}" "${APPIMAGELAUNCHER_GIT_COMMIT}")
-    endif()
-endif()
+    #    execute_process(
+    #   COMMAND git rev-parse --short HEAD
+    #   WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
+    #    OUTPUT_VARIABLE APPIMAGELAUNCHER_GIT_COMMIT
+    #    OUTPUT_STRIP_TRAILING_WHITESPACE
+    #    ERROR_QUIET
+    #    RESULT_VARIABLE GIT_RESULT
+    #)
+
+    # if(GIT_RESULT AND GIT_RESULT EQUAL 0)
+    #    message("Storing git commit ID in cache file")
+    #    file(WRITE "${GIT_COMMIT_CACHE_FILE}" "${APPIMAGELAUNCHER_GIT_COMMIT}")
+    #endif()
+    #endif()
 
-if(NOT GIT_RESULT EQUAL 0)
+    #if(NOT GIT_RESULT EQUAL 0)
     # git call failed or git hasn't been found, might happen when calling CMake in an extracted source tarball
     # therefore we try to find the git commit cache file
     # if it doesn't exist, refuse to configure
 
-    message(WARNING "Failed to gather commit ID via git command, trying to read cache file")
-    if(EXISTS "${GIT_COMMIT_CACHE_FILE}")
-        file(READ "${GIT_COMMIT_CACHE_FILE}" APPIMAGELAUNCHER_CACHED_GIT_COMMIT)
-        mark_as_advanced(FORCE APPIMAGELAUNCHER_CACHED_GIT_COMMIT)
-        string(REPLACE "\n" "" APPIMAGELAUNCHER_GIT_COMMIT "${APPIMAGELAUNCHER_CACHED_GIT_COMMIT}")
-    else()
-        message(FATAL_ERROR "Could not find git commit cache file, git commit ID not available for versioning")
-    endif()
-endif()
-
-if("${APPIMAGELAUNCHER_GIT_COMMIT}" STREQUAL "")
-    message(FATAL_ERROR "Invalid git commit ID: ${APPIMAGELAUNCHER_GIT_COMMIT}")
-endif()
+    #message(WARNING "Failed to gather commit ID via git command, trying to read cache file")
+    #if(EXISTS "${GIT_COMMIT_CACHE_FILE}")
+    #    file(READ "${GIT_COMMIT_CACHE_FILE}" APPIMAGELAUNCHER_CACHED_GIT_COMMIT)
+    #    mark_as_advanced(FORCE APPIMAGELAUNCHER_CACHED_GIT_COMMIT)
+    #    string(REPLACE "\n" "" APPIMAGELAUNCHER_GIT_COMMIT "${APPIMAGELAUNCHER_CACHED_GIT_COMMIT}")
+    #else()
+    #    message(FATAL_ERROR "Could not find git commit cache file, git commit ID not available for versioning")
+    #endif()
+    #endif()
+
+    #if("${APPIMAGELAUNCHER_GIT_COMMIT}" STREQUAL "")
+    #message(FATAL_ERROR "Invalid git commit ID: ${APPIMAGELAUNCHER_GIT_COMMIT}")
+    #endif()
 
-message(STATUS "Git commit: ${APPIMAGELAUNCHER_GIT_COMMIT}")
-mark_as_advanced(FORCE APPIMAGELAUNCHER_GIT_COMMIT)
+    #message(STATUS "Git commit: ${APPIMAGELAUNCHER_GIT_COMMIT}")
+    #mark_as_advanced(FORCE APPIMAGELAUNCHER_GIT_COMMIT)
 
 # set version and build number
 set(VERSION 1-alpha)
